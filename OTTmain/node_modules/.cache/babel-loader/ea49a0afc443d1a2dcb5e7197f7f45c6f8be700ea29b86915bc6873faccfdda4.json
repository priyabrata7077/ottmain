{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Ott\\\\OTTFrontend\\\\OTTmain\\\\src\\\\Components\\\\Home\\\\Showcase.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport style from './showcase.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Showcase = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\n\n  // Fetch videos from the API\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/movies/');\n        const data = await response.json();\n        console.log('Fetched videos:', data); // Log API response\n        setVideos(data || []); // Store the videos in state\n      } catch (error) {\n        console.error('Error fetching videos:', error);\n      }\n    };\n    fetchVideos();\n  }, []);\n  const handleVideoClick = videoUrl => {\n    setSelectedVideo(videoUrl); // Set the video URL to play in modal\n  };\n  const closeModal = () => {\n    setSelectedVideo(null); // Close the modal by resetting video URL\n  };\n\n  // Auto-scroll functionality for videos\n  useEffect(() => {\n    if (videos.length > 0) {\n      const interval = setInterval(() => {\n        setCurrentVideoIndex(prevIndex => (prevIndex + 1) % videos.length);\n      }, 5000); // Auto slide every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [videos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.gallerycontainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.gallerywrapper,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.gallerygrid,\n          style: {\n            transform: `translateX(-${currentVideoIndex * 210}px)`,\n            // Adjust scrolling width\n            transition: 'transform 0.8s ease'\n          },\n          children: videos.map((video, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.galleryitem,\n            onClick: () => handleVideoClick(video.movie_file) // Click to open video in modal\n            ,\n            children: video.poster_image && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: video.poster_image,\n              alt: video.title,\n              className: style.posterImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 37\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), selectedVideo && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.modal,\n        onClick: closeModal,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: style.close,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          className: style.modalcontent,\n          controls: true,\n          autoPlay: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: selectedVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(Showcase, \"3Gk0lD9ppM7kWDAOzTKWnewwwak=\");\n_c = Showcase;\nexport default Showcase;\nvar _c;\n$RefreshReg$(_c, \"Showcase\");","map":{"version":3,"names":["React","useState","useEffect","style","jsxDEV","_jsxDEV","Showcase","_s","videos","setVideos","selectedVideo","setSelectedVideo","currentVideoIndex","setCurrentVideoIndex","fetchVideos","response","fetch","data","json","console","log","error","handleVideoClick","videoUrl","closeModal","length","interval","setInterval","prevIndex","clearInterval","className","container","children","gallerycontainer","gallerywrapper","gallerygrid","transform","transition","map","video","index","galleryitem","onClick","movie_file","poster_image","src","alt","title","posterImage","fileName","_jsxFileName","lineNumber","columnNumber","modal","close","modalcontent","controls","autoPlay","type","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Home/Showcase.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport style from './showcase.module.css';\r\n\r\nconst Showcase = () => {\r\n    const [videos, setVideos] = useState([]);\r\n    const [selectedVideo, setSelectedVideo] = useState(null);\r\n    const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\r\n\r\n    // Fetch videos from the API\r\n    useEffect(() => {\r\n        const fetchVideos = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/movies/');\r\n                const data = await response.json();\r\n                console.log('Fetched videos:', data); // Log API response\r\n                setVideos(data || []); // Store the videos in state\r\n            } catch (error) {\r\n                console.error('Error fetching videos:', error);\r\n            }\r\n        };\r\n    \r\n        fetchVideos();\r\n    }, []);\r\n\r\n    const handleVideoClick = (videoUrl) => {\r\n        setSelectedVideo(videoUrl); // Set the video URL to play in modal\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setSelectedVideo(null); // Close the modal by resetting video URL\r\n    };\r\n\r\n    // Auto-scroll functionality for videos\r\n    useEffect(() => {\r\n        if (videos.length > 0) {\r\n            const interval = setInterval(() => {\r\n                setCurrentVideoIndex((prevIndex) => (prevIndex + 1) % videos.length);\r\n            }, 5000); // Auto slide every 5 seconds\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [videos]);\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.gallerycontainer}>\r\n                <div className={style.gallerywrapper}>\r\n                    <div\r\n                        className={style.gallerygrid}\r\n                        style={{\r\n                            transform: `translateX(-${currentVideoIndex * 210}px)`, // Adjust scrolling width\r\n                            transition: 'transform 0.8s ease',\r\n                        }}\r\n                    >\r\n                        {videos.map((video, index) => (\r\n                            <div \r\n                                key={index} \r\n                                className={style.galleryitem} \r\n                                onClick={() => handleVideoClick(video.movie_file)} // Click to open video in modal\r\n                            >\r\n                                {/* Render the poster image */}\r\n                                {video.poster_image && (\r\n                                    <img \r\n                                        src={video.poster_image} \r\n                                        alt={video.title} \r\n                                        className={style.posterImage} \r\n                                    />\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Modal to play selected video */}\r\n                {selectedVideo && (\r\n                    <div className={style.modal} onClick={closeModal}>\r\n                        <span className={style.close}>&times;</span>\r\n                        <video className={style.modalcontent} controls autoPlay>\r\n                            <source src={selectedVideo} type=\"video/mp4\" />\r\n                            Your browser does not support the video tag.\r\n                        </video>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Showcase;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}