{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Ott\\\\OTTFrontend\\\\OTTmain\\\\src\\\\Components\\\\Home\\\\RenderCharCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MovieCard from './MovieCard';\nimport style from './renderMovie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State to hold movie data\n  const [error, setError] = useState(null); // State to handle any errors\n  const [isPlayerOpen, setIsPlayerOpen] = useState(false); // State to control video player visibility\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to store selected movie details\n\n  // Fetch movies data from the API\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/movies/?language=Hindi'); // Ensure you update the endpoint for your use case\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n\n        // Check if data is an array and set state\n        if (Array.isArray(data)) {\n          setMovies(data);\n        } else {\n          console.error('Data is not an array:', data);\n          setError('Invalid data format received from the server.');\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n        setError(error.message); // Set the error message to state\n      }\n    };\n    fetchMovies();\n  }, []);\n\n  // Open the video player modal with a delay\n  const openPlayer = movie => {\n    setSelectedMovie(movie); // Set the clicked movie as the selected movie\n\n    // Delay opening the modal by 3 seconds (3000 ms)\n    setTimeout(() => {\n      setIsPlayerOpen(true); // Show the video player modal\n    }, 3000);\n  };\n\n  // Close the video player modal\n  const closePlayer = () => {\n    setIsPlayerOpen(false); // Hide the video player modal\n    setSelectedMovie(null); // Clear the selected movie\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: style.eventstitle,\n      id: \"hindi\",\n      children: \"GUJARATI MOVIE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: style.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.movielist,\n      children: movies.length > 0 ? movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.movieitem,\n        onClick: () => openPlayer(movie),\n        children: /*#__PURE__*/_jsxDEV(MovieCard, {\n          image: movie.poster_image // Use the correct property for image URL from your API response\n          ,\n          title: movie.title,\n          genre: movie.genre,\n          language: movie.language\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) // Message when no movies are found\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), isPlayerOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.playerOverlay,\n      onClick: closePlayer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.playerContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closePlayer,\n          className: style.closeButton,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), selectedMovie && /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          className: style.videoPlayer,\n          autoPlay: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: selectedMovie.movie_file,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), \" \", \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1qn3WFNz6nkKZWUbfIoaJ4F0HJk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MovieCard","style","jsxDEV","_jsxDEV","App","_s","movies","setMovies","error","setError","isPlayerOpen","setIsPlayerOpen","selectedMovie","setSelectedMovie","fetchMovies","response","fetch","ok","Error","data","json","Array","isArray","console","message","openPlayer","movie","setTimeout","closePlayer","children","className","eventstitle","id","fileName","_jsxFileName","lineNumber","columnNumber","movielist","length","map","movieitem","onClick","image","poster_image","title","genre","language","playerOverlay","playerContainer","closeButton","controls","videoPlayer","autoPlay","src","movie_file","type","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Home/RenderCharCard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MovieCard from './MovieCard';\r\nimport style from './renderMovie.module.css';\r\n\r\nconst App = () => {\r\n  const [movies, setMovies] = useState([]); // State to hold movie data\r\n  const [error, setError] = useState(null); // State to handle any errors\r\n  const [isPlayerOpen, setIsPlayerOpen] = useState(false); // State to control video player visibility\r\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to store selected movie details\r\n\r\n  // Fetch movies data from the API\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/movies/?language=Hindi'); // Ensure you update the endpoint for your use case\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n\r\n        // Check if data is an array and set state\r\n        if (Array.isArray(data)) {\r\n          setMovies(data);\r\n        } else {\r\n          console.error('Data is not an array:', data);\r\n          setError('Invalid data format received from the server.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching movies:', error);\r\n        setError(error.message); // Set the error message to state\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  // Open the video player modal with a delay\r\n  const openPlayer = (movie) => {\r\n    setSelectedMovie(movie); // Set the clicked movie as the selected movie\r\n\r\n    // Delay opening the modal by 3 seconds (3000 ms)\r\n    setTimeout(() => {\r\n      setIsPlayerOpen(true); // Show the video player modal\r\n    }, 3000);\r\n  };\r\n\r\n  // Close the video player modal\r\n  const closePlayer = () => {\r\n    setIsPlayerOpen(false); // Hide the video player modal\r\n    setSelectedMovie(null); // Clear the selected movie\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={style.eventstitle} id=\"hindi\">GUJARATI MOVIE</h1>\r\n      {error && <p className={style.error}>{error}</p>} {/* Display error message if there's an error */}\r\n      <div className={style.movielist}>\r\n        {movies.length > 0 ? (\r\n          movies.map((movie) => (\r\n            <div key={movie.id} className={style.movieitem} onClick={() => openPlayer(movie)}>\r\n              <MovieCard\r\n                image={movie.poster_image} // Use the correct property for image URL from your API response\r\n                title={movie.title}\r\n                genre={movie.genre}\r\n                language={movie.language}\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No movies available.</p> // Message when no movies are found\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal for video player */}\r\n      {isPlayerOpen && (\r\n        <div className={style.playerOverlay} onClick={closePlayer}>\r\n          <div className={style.playerContainer}>\r\n            <button onClick={closePlayer} className={style.closeButton}>X</button>\r\n            {selectedMovie && (\r\n              <video controls className={style.videoPlayer} autoPlay>\r\n                <source src={selectedMovie.movie_file} type=\"video/mp4\" /> {/* Use movie file instead of trailer */}\r\n                Your browser does not support the video tag.\r\n              </video>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}