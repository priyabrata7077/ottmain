{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Ott\\\\OTTFrontend\\\\OTTmain\\\\src\\\\Components\\\\Shows\\\\ShowList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ShowCard from './ShowCard';\nimport style from './showList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShowList = () => {\n  _s();\n  const [shows, setShows] = useState([]); // State to hold API data\n  const [error, setError] = useState(null); // State to handle any errors\n\n  // Fetch data from the API when the component mounts\n  useEffect(() => {\n    const fetchShows = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/shows/'); // API request\n        if (!response.ok) {\n          throw new Error('Failed to fetch shows data');\n        }\n        const data = await response.json(); // Parse the JSON data\n        setShows(data); // Set the fetched data to the shows state\n      } catch (error) {\n        setError(error.message); // Catch and set any errors\n      }\n    };\n    fetchShows();\n  }, []); // Empty dependency array ensures this runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.showListContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: style.showListTitle,\n      children: \"Popular Shows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: style.error,\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.showGrid,\n      children: shows.length > 0 ? shows.map((show, index) => /*#__PURE__*/_jsxDEV(ShowCard, {\n        image: show.poster_image // Ensure this matches the field from the API response\n        ,\n        title: show.title,\n        description: show.synopsis // Adjust to match API response field\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No shows available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this) // Display this if no shows are found\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ShowList, \"petD6K4q8vAKFK63rcyxSwzC5wk=\");\n_c = ShowList;\nexport default ShowList;\nvar _c;\n$RefreshReg$(_c, \"ShowList\");","map":{"version":3,"names":["React","useEffect","useState","ShowCard","style","jsxDEV","_jsxDEV","ShowList","_s","shows","setShows","error","setError","fetchShows","response","fetch","ok","Error","data","json","message","className","showListContainer","children","showListTitle","fileName","_jsxFileName","lineNumber","columnNumber","showGrid","length","map","show","index","image","poster_image","title","description","synopsis","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Shows/ShowList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ShowCard from './ShowCard';\r\nimport style from './showList.module.css';\r\n\r\nconst ShowList = () => {\r\n  const [shows, setShows] = useState([]);  // State to hold API data\r\n  const [error, setError] = useState(null); // State to handle any errors\r\n\r\n  // Fetch data from the API when the component mounts\r\n  useEffect(() => {\r\n    const fetchShows = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/shows/'); // API request\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch shows data');\r\n        }\r\n        const data = await response.json(); // Parse the JSON data\r\n        setShows(data);  // Set the fetched data to the shows state\r\n      } catch (error) {\r\n        setError(error.message);  // Catch and set any errors\r\n      }\r\n    };\r\n\r\n    fetchShows();\r\n  }, []);  // Empty dependency array ensures this runs only once\r\n\r\n  return (\r\n    <div className={style.showListContainer}>\r\n      <h2 className={style.showListTitle}>Popular Shows</h2>\r\n      {error && <p className={style.error}>Error: {error}</p>} {/* Show error if there's one */}\r\n      <div className={style.showGrid}>\r\n        {shows.length > 0 ? (\r\n          shows.map((show, index) => (\r\n            <ShowCard\r\n              key={index}\r\n              image={show.poster_image}     // Ensure this matches the field from the API response\r\n              title={show.title}\r\n              description={show.synopsis}   // Adjust to match API response field\r\n            />\r\n          ))\r\n        ) : (\r\n          <p>No shows available</p>  // Display this if no shows are found\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACzC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAClE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;QACpCT,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAE;MACnB,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAACS,OAAO,CAAC,CAAC,CAAE;MAC5B;IACF,CAAC;IAEDP,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET,oBACEP,OAAA;IAAKe,SAAS,EAAEjB,KAAK,CAACkB,iBAAkB;IAAAC,QAAA,gBACtCjB,OAAA;MAAIe,SAAS,EAAEjB,KAAK,CAACoB,aAAc;MAAAD,QAAA,EAAC;IAAa;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrDjB,KAAK,iBAAIL,OAAA;MAAGe,SAAS,EAAEjB,KAAK,CAACO,KAAM;MAAAY,QAAA,GAAC,SAAO,EAACZ,KAAK;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAAC,GAAC,eACzDtB,OAAA;MAAKe,SAAS,EAAEjB,KAAK,CAACyB,QAAS;MAAAN,QAAA,EAC5Bd,KAAK,CAACqB,MAAM,GAAG,CAAC,GACfrB,KAAK,CAACsB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACpB3B,OAAA,CAACH,QAAQ;QAEP+B,KAAK,EAAEF,IAAI,CAACG,YAAa,CAAK;QAAA;QAC9BC,KAAK,EAAEJ,IAAI,CAACI,KAAM;QAClBC,WAAW,EAAEL,IAAI,CAACM,QAAS,CAAG;MAAA,GAHzBL,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF,CAAC,gBAEFtB,OAAA;QAAAiB,QAAA,EAAG;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAE;IAC5B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpB,EAAA,CA1CID,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AA4Cd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}