{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Ott\\\\OTTFrontend\\\\OTTmain\\\\src\\\\Components\\\\Home\\\\RenderCharCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport MovieCard from './MovieCard'; // Assuming you have a MovieCard component\nimport style from './renderCharCard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State to hold movie data\n  const [isPlayerOpen, setIsPlayerOpen] = useState(false); // State to control video player visibility\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to store selected movie details\n  const videoRef = useRef(null); // Reference to the video element\n\n  // Fetch movies data from the API\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/shows/'); // Update the endpoint as needed\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        if (Array.isArray(data)) {\n          setMovies(data);\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n      }\n    };\n    fetchMovies();\n  }, []); // Empty dependency array to run once after the initial render\n\n  // Open the video player modal\n  const openPlayer = movie => {\n    setSelectedMovie(movie); // Set the clicked movie as the selected movie\n    setIsPlayerOpen(true); // Show the video player modal\n  };\n\n  // Close the video player modal\n  const closePlayer = () => {\n    setIsPlayerOpen(false); // Hide the video player modal\n    setSelectedMovie(null); // Clear the selected movie\n  };\n\n  // Fullscreen handler\n  const enterFullScreen = () => {\n    if (videoRef.current) {\n      if (videoRef.current.requestFullscreen) {\n        videoRef.current.requestFullscreen();\n      } else if (videoRef.current.mozRequestFullScreen) {\n        // Firefox\n        videoRef.current.mozRequestFullScreen();\n      } else if (videoRef.current.webkitRequestFullscreen) {\n        // Chrome, Safari, and Opera\n        videoRef.current.webkitRequestFullscreen();\n      } else if (videoRef.current.msRequestFullscreen) {\n        // IE/Edge\n        videoRef.current.msRequestFullscreen();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: style.eventstitle,\n      id: \"hindi\",\n      children: \"GUJARATI Shows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.movielist,\n      children: movies.length > 0 ? movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.movieitem,\n        onClick: () => openPlayer(movie) // Open player on click\n        ,\n        children: /*#__PURE__*/_jsxDEV(MovieCard, {\n          image: movie.poster_image // Image URL from your API response\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) // Message when no movies are found\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), isPlayerOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.playerOverlay,\n      onClick: closePlayer,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.playerContainer,\n        onClick: e => e.stopPropagation(),\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: closePlayer,\n          className: style.closeButton,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), selectedMovie && /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef // Set the ref to the video element\n          ,\n          controls: true,\n          className: style.videoPlayer,\n          autoPlay: true,\n          onClick: enterFullScreen // Click on the video to enter full screen\n          ,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: selectedMovie.show_file,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"o7RVpZO/PFJqZFpDNi23gXB0FeU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MovieCard","style","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isPlayerOpen","setIsPlayerOpen","selectedMovie","setSelectedMovie","videoRef","fetchMovies","response","fetch","ok","Error","data","json","Array","isArray","error","console","openPlayer","movie","closePlayer","enterFullScreen","current","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","children","className","eventstitle","id","fileName","_jsxFileName","lineNumber","columnNumber","movielist","length","map","movieitem","onClick","image","poster_image","playerOverlay","playerContainer","e","stopPropagation","closeButton","ref","controls","videoPlayer","autoPlay","src","show_file","type","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Home/RenderCharCard.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport MovieCard from './MovieCard'; // Assuming you have a MovieCard component\r\nimport style from './renderCharCard.module.css';\r\n\r\nconst App = () => {\r\n  const [movies, setMovies] = useState([]); // State to hold movie data\r\n  const [isPlayerOpen, setIsPlayerOpen] = useState(false); // State to control video player visibility\r\n  const [selectedMovie, setSelectedMovie] = useState(null); // State to store selected movie details\r\n  const videoRef = useRef(null); // Reference to the video element\r\n\r\n  // Fetch movies data from the API\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/shows/'); // Update the endpoint as needed\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n        if (Array.isArray(data)) {\r\n          setMovies(data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching movies:', error);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []); // Empty dependency array to run once after the initial render\r\n\r\n  // Open the video player modal\r\n  const openPlayer = (movie) => {\r\n    setSelectedMovie(movie); // Set the clicked movie as the selected movie\r\n    setIsPlayerOpen(true); // Show the video player modal\r\n  };\r\n\r\n  // Close the video player modal\r\n  const closePlayer = () => {\r\n    setIsPlayerOpen(false); // Hide the video player modal\r\n    setSelectedMovie(null); // Clear the selected movie\r\n  };\r\n\r\n  // Fullscreen handler\r\n  const enterFullScreen = () => {\r\n    if (videoRef.current) {\r\n      if (videoRef.current.requestFullscreen) {\r\n        videoRef.current.requestFullscreen();\r\n      } else if (videoRef.current.mozRequestFullScreen) { // Firefox\r\n        videoRef.current.mozRequestFullScreen();\r\n      } else if (videoRef.current.webkitRequestFullscreen) { // Chrome, Safari, and Opera\r\n        videoRef.current.webkitRequestFullscreen();\r\n      } else if (videoRef.current.msRequestFullscreen) { // IE/Edge\r\n        videoRef.current.msRequestFullscreen();\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={style.eventstitle} id=\"hindi\">GUJARATI Shows</h1>\r\n      <div className={style.movielist}>\r\n        {movies.length > 0 ? (\r\n          movies.map((movie) => (\r\n            <div \r\n              key={movie.id} \r\n              className={style.movieitem} \r\n              onClick={() => openPlayer(movie)} // Open player on click\r\n            >\r\n              <MovieCard\r\n                image={movie.poster_image} // Image URL from your API response\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No movies available.</p> // Message when no movies are found\r\n        )}\r\n      </div>\r\n\r\n      {/* Video Player Overlay */}\r\n      {isPlayerOpen && (\r\n        <div className={style.playerOverlay} onClick={closePlayer}>\r\n          <div className={style.playerContainer} onClick={(e) => e.stopPropagation()}> {/* Prevent click from closing player */}\r\n            <button onClick={closePlayer} className={style.closeButton}>X</button>\r\n            {selectedMovie && (\r\n              <video \r\n                ref={videoRef} // Set the ref to the video element\r\n                controls \r\n                className={style.videoPlayer} \r\n                autoPlay\r\n                onClick={enterFullScreen} // Click on the video to enter full screen\r\n              >\r\n                <source src={selectedMovie.show_file} type=\"video/mp4\" />\r\n                Your browser does not support the video tag.\r\n              </video>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}