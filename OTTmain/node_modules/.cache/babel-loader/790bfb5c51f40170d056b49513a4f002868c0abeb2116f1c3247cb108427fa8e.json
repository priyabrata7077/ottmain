{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Ott\\\\OTTFrontend\\\\OTTmain\\\\src\\\\Components\\\\Home\\\\RenderCharCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MovieCard from './MovieCard';\nimport style from './renderMovie.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]); // State to hold movie data\n  const [error, setError] = useState(null); // State to handle any errors\n\n  // Fetch movies data from the API\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/movies/?language=Hindi'); // Ensure you update the endpoint for your use case\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n\n        // Check if data is an array and set state\n        if (Array.isArray(data)) {\n          setMovies(data);\n        } else {\n          console.error('Data is not an array:', data);\n          setError('Invalid data format received from the server.');\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n        setError(error.message); // Set the error message to state\n      }\n    };\n    fetchMovies();\n  }, []);\n\n  // Open the video in a new tab\n  const openVideoInNewTab = movie => {\n    window.open(movie.movie_file, '_blank'); // Open video file in a new tab\n  };\n\n  // Open video in full-screen mode\n  const openVideoInFullScreen = movie => {\n    const videoElement = document.createElement('video');\n    videoElement.src = movie.movie_file; // Use movie file instead of trailer\n    videoElement.controls = true; // Add video controls\n\n    // Append video to body\n    document.body.appendChild(videoElement);\n\n    // Request full-screen\n    videoElement.requestFullscreen();\n\n    // Remove the video element when closed\n    videoElement.onfullscreenchange = () => {\n      if (!document.fullscreenElement) {\n        document.body.removeChild(videoElement);\n      }\n    };\n    videoElement.play(); // Start playing video\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: style.eventstitle,\n      id: \"hindi\",\n      children: \"GUJARATI MOVIE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: style.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.movielist,\n      children: movies.length > 0 ? movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.movieitem,\n        onClick: () => openVideoInNewTab(movie) // Open in new tab\n        ,\n        children: /*#__PURE__*/_jsxDEV(MovieCard, {\n          image: movie.poster_image // Use the correct property for image URL from your API response\n          ,\n          title: movie.title,\n          genre: movie.genre,\n          language: movie.language\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this) // Message when no movies are found\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/oiihY625Ce2rW4TtQJCK1P9yC8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MovieCard","style","jsxDEV","_jsxDEV","App","_s","movies","setMovies","error","setError","fetchMovies","response","fetch","ok","Error","data","json","Array","isArray","console","message","openVideoInNewTab","movie","window","open","movie_file","openVideoInFullScreen","videoElement","document","createElement","src","controls","body","appendChild","requestFullscreen","onfullscreenchange","fullscreenElement","removeChild","play","children","className","eventstitle","id","fileName","_jsxFileName","lineNumber","columnNumber","movielist","length","map","movieitem","onClick","image","poster_image","title","genre","language","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Home/RenderCharCard.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport MovieCard from './MovieCard';\r\nimport style from './renderMovie.module.css';\r\n\r\nconst App = () => {\r\n  const [movies, setMovies] = useState([]); // State to hold movie data\r\n  const [error, setError] = useState(null); // State to handle any errors\r\n\r\n  // Fetch movies data from the API\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:8000/api/movies/?language=Hindi'); // Ensure you update the endpoint for your use case\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const data = await response.json();\r\n\r\n        // Check if data is an array and set state\r\n        if (Array.isArray(data)) {\r\n          setMovies(data);\r\n        } else {\r\n          console.error('Data is not an array:', data);\r\n          setError('Invalid data format received from the server.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching movies:', error);\r\n        setError(error.message); // Set the error message to state\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, []);\r\n\r\n  // Open the video in a new tab\r\n  const openVideoInNewTab = (movie) => {\r\n    window.open(movie.movie_file, '_blank'); // Open video file in a new tab\r\n  };\r\n\r\n  // Open video in full-screen mode\r\n  const openVideoInFullScreen = (movie) => {\r\n    const videoElement = document.createElement('video');\r\n    videoElement.src = movie.movie_file; // Use movie file instead of trailer\r\n    videoElement.controls = true; // Add video controls\r\n\r\n    // Append video to body\r\n    document.body.appendChild(videoElement);\r\n    \r\n    // Request full-screen\r\n    videoElement.requestFullscreen();\r\n\r\n    // Remove the video element when closed\r\n    videoElement.onfullscreenchange = () => {\r\n      if (!document.fullscreenElement) {\r\n        document.body.removeChild(videoElement);\r\n      }\r\n    };\r\n\r\n    videoElement.play(); // Start playing video\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={style.eventstitle} id=\"hindi\">GUJARATI MOVIE</h1>\r\n      {error && <p className={style.error}>{error}</p>} {/* Display error message if there's an error */}\r\n      <div className={style.movielist}>\r\n        {movies.length > 0 ? (\r\n          movies.map((movie) => (\r\n            <div \r\n              key={movie.id} \r\n              className={style.movieitem} \r\n              onClick={() => openVideoInNewTab(movie)} // Open in new tab\r\n            >\r\n              <MovieCard\r\n                image={movie.poster_image} // Use the correct property for image URL from your API response\r\n                title={movie.title}\r\n                genre={movie.genre}\r\n                language={movie.language}\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No movies available.</p> // Message when no movies are found\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}