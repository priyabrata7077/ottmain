{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport style from './showcase.module.css';\nimport OwlCarousel from 'react-owl-carousel';\nimport 'owl.carousel/dist/assets/owl.carousel.css';\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Showcase = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\n\n  // Fetch videos from the API\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/movies/');\n        const data = await response.json();\n        console.log(data); // Check the API response in the console\n        setVideos(data || []); // Adjusted to directly set data\n      } catch (error) {\n        console.error('Error fetching videos:', error);\n      }\n    };\n    fetchVideos();\n  }, []);\n  const handleVideoClick = videoUrl => {\n    setSelectedVideo(videoUrl);\n  };\n  const closeModal = () => {\n    setSelectedVideo(null);\n  };\n\n  // Auto-scroll functionality for videos\n  useEffect(() => {\n    if (videos.length > 0) {\n      const interval = setInterval(() => {\n        setCurrentVideoIndex(prevIndex => (prevIndex + 1) % videos.length);\n      }, 3000); // Auto slide every 3 seconds\n      return () => clearInterval(interval);\n    }\n  }, [videos]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \" */}\"\n  }, void 0, false);\n};\n_s(Showcase, \"3Gk0lD9ppM7kWDAOzTKWnewwwak=\");\n_c = Showcase;\nexport default Showcase;\nvar _c;\n$RefreshReg$(_c, \"Showcase\");","map":{"version":3,"names":["React","useState","useEffect","style","OwlCarousel","Fragment","_Fragment","jsxDEV","_jsxDEV","Showcase","_s","videos","setVideos","selectedVideo","setSelectedVideo","currentVideoIndex","setCurrentVideoIndex","fetchVideos","response","fetch","data","json","console","log","error","handleVideoClick","videoUrl","closeModal","length","interval","setInterval","prevIndex","clearInterval","children","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Ott/OTTFrontend/OTTmain/src/Components/Home/Showcase.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport style from './showcase.module.css';\r\nimport OwlCarousel from 'react-owl-carousel';\r\nimport 'owl.carousel/dist/assets/owl.carousel.css';\r\nimport 'owl.carousel/dist/assets/owl.theme.default.css';\r\n\r\n\r\nconst Showcase = () => {\r\n    const [videos, setVideos] = useState([]); \r\n    const [selectedVideo, setSelectedVideo] = useState(null);\r\n    const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\r\n\r\n    // Fetch videos from the API\r\n    useEffect(() => {\r\n        const fetchVideos = async () => {\r\n            try {\r\n                const response = await fetch('http://127.0.0.1:8000/api/movies/');\r\n                const data = await response.json();\r\n                console.log(data); // Check the API response in the console\r\n                setVideos(data || []); // Adjusted to directly set data\r\n            } catch (error) {\r\n                console.error('Error fetching videos:', error);\r\n            }\r\n        };\r\n    \r\n        fetchVideos();\r\n    }, []);\r\n\r\n    const handleVideoClick = (videoUrl) => {\r\n        setSelectedVideo(videoUrl);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setSelectedVideo(null);\r\n    };\r\n\r\n    // Auto-scroll functionality for videos\r\n    useEffect(() => {\r\n        if (videos.length > 0) {\r\n            const interval = setInterval(() => {\r\n                setCurrentVideoIndex((prevIndex) => (prevIndex + 1) % videos.length);\r\n            }, 3000); // Auto slide every 3 seconds\r\n            return () => clearInterval(interval);\r\n        }\r\n    }, [videos]);\r\n\r\n    return (\r\n        <>\r\n        {/* <div>\r\n            <div className={style.container}>\r\n                <div className={style.gallerycontainer}>\r\n                    <div className={style.gallerywrapper}>\r\n                        <div\r\n                            className={style.gallerygrid}\r\n                            style={{\r\n                                transform: `translateX(-${currentVideoIndex * 100}%)`,\r\n                                transition: 'transform 1s ease',\r\n                            }}\r\n                        >\r\n                            {videos.map((video, index) => (\r\n                                <div key={index} className={style.galleryitem} onClick={() => handleVideoClick(video.trailer_url)}>\r\n                                    {/* Render the poster image */}\r\n                                    {/* {video.poster_image && (\r\n                                        <img \r\n                                            src={video.poster_image} \r\n                                            alt={video.title} \r\n                                            className={style.posterImage} \r\n                                        />\r\n                                    )}\r\n                                    <video className={style.galleryvideo} controls>\r\n                                        <source src={video.movie_file} type=\"video/mp4\" />\r\n                                        Your browser does not support the video tag.\r\n                                    </video>\r\n                                </div>\r\n                            ))} */}\r\n                        {/* </div>\r\n                    </div>\r\n\r\n                    {selectedVideo && (\r\n                        <div className={style.modal} onClick={closeModal}>\r\n                            <span className={style.close}>&times;</span>\r\n                            <video className={style.modalcontent} controls>\r\n                                <source src={selectedVideo} type=\"video/mp4\" />\r\n                                Your browser does not support the video tag.\r\n                            </video>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div> */} */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Showcase;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAO,2CAA2C;AAClD,OAAO,gDAAgD;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAGxD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;;EAE7D;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMe,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACjE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;QACnBR,SAAS,CAACQ,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACZF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IAEDP,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,gBAAgB,GAAIC,QAAQ,IAAK;IACnCZ,gBAAgB,CAACY,QAAQ,CAAC;EAC9B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrBb,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACZ,IAAIS,MAAM,CAACiB,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QAC/Bd,oBAAoB,CAAEe,SAAS,IAAK,CAACA,SAAS,GAAG,CAAC,IAAIpB,MAAM,CAACiB,MAAM,CAAC;MACxE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACV,OAAO,MAAMI,aAAa,CAACH,QAAQ,CAAC;IACxC;EACJ,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EAEZ,oBACIH,OAAA,CAAAF,SAAA;IAAA2B,QAAA,EA0CU;EACV,gBAAE,CAAC;AAEX,CAAC;AAACvB,EAAA,CArFID,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAuFd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}